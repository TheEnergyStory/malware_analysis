#!/usr/bin/env python
############
# Date: 2016-06-11
# Author: R136a1
# Description: File extractor (DOC, EXE) for TrojanDropper:W97M/Miskip.(A/B) documents
# Version: 0.1
############

import argparse
import struct

doc_signature = "\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1"
pe_signature_ex = "\x4D\x5A\x90"


# Get version of the macro (old/new)
def get_macro_version(data):
	data_size = len(data)
	delta = struct.unpack_from("<L", data, data_size-4)[0]
	offset_magic = data_size - delta - 5
	magic = data[offset_magic:offset_magic+4]
	key = brute_force_key(magic, "old")
	if key is not None: 
		decrypt(magic, len(magic), key, "old")
		if magic.find(pe_signature_ex) != -1:
			return "old"
	else:
		offset_magic = data_size - delta + 4
		magic = data[offset_magic:offset_magic+8]
		key = brute_force_key(magic, "new")
		decrypt(magic, len(magic), key, "new")
		if magic.find(doc_signature) != -1:
			return "new"	


# Use brute force method to get decryption key
def brute_force_key(data, version):
	if version == "old":
		for i in range(256):
			signature = data[0:4]
			for j in range(len(signature)):
				signature[j] ^= i
				i = (i ^ 217) ^ (j % 256)
			if signature.find(pe_signature_ex) != -1:
				return i
	elif version == "new":
		for i in range(256):
			signature = data[0:8]
			for j in range(len(signature)):
				signature[j] ^= i
				i ^= ((200 + j) % 256)
				i ^= (j % 256)
			if signature.find(doc_signature) != -1:
				return i


# Decryption algorithm
def decrypt(data, length, key, version):
	for i in range(length):
		if version == "old":
			data[i] ^= key
			key = (key ^ 217) ^ (i % 256)
		elif version == "new":
			data[i] ^= key
			key ^= ((200 + i) % 256)
			key ^= (i % 256)


# Create output file
def create_file(data, name):
	with open(name, "wb") as file:
		for b in data:
			file.write(struct.pack("B", b))


def main():
	print "\nMiskip file extractor"
	print "*********************\n"
	
	parser = argparse.ArgumentParser(usage="%(prog)s <filename>")
	parser.add_argument("filename",help="- File name of the TrojanDropper:W97M/Miskip Word document")
	arg = parser.parse_args()
	
	file_data = bytearray(open(arg.filename, "rb").read())
	if file_data.find(doc_signature) == -1:
		print "Error: '%s' is not a Microsoft Word document (DOC)!" % (arg.filename)
		return
	
	file_size = len(file_data)
	macro_version = get_macro_version(file_data)
	if macro_version is None:
		print "Error: '%s' is not a TrojanDropper:W97M/Miskip document or was modified!" % (arg.filename)
		return
	
	print "Macro version: %s" % macro_version
	
	if macro_version == "old":
		payload_size = struct.unpack_from("<L", file_data, file_size-4)[0]
		offset_payload = file_size - (payload_size + 5)
		payload_data = file_data[offset_payload:offset_payload+payload_size]
		
		print "Payload offset: 0x%x" % offset_payload
		print "Payload size: %s bytes" % payload_size
		
		key = brute_force_key(payload_data, "old")
		decrypt(payload_data, payload_size, key, "old")
		create_file(payload_data, "payload_exe.bin")
		
		print "Payload successfully decrypted as: payload_exe.bin"
		print "Decryption key: 0x%x" % key
		
	elif macro_version == "new":
		delta = struct.unpack_from("<L", file_data, file_size-4)[0]
		offset_decoy = file_size - delta
		decoy_size = struct.unpack_from("<L", file_data, offset_decoy)[0]
		offset_decoy += 4
		decoy_data = file_data[offset_decoy:offset_decoy+decoy_size]
		
		print "Decoy document offset: 0x%x" % offset_decoy
		print "Decoy document size: %s bytes" % decoy_size
		
		key = brute_force_key(decoy_data, "new")
		decrypt(decoy_data, decoy_size, key, "new")
		create_file(decoy_data, "decoy_doc.bin")	
		
		print "Decoy document successfully decrypted as: decoy_doc.bin"
		
		offset_payload = offset_decoy + decoy_size + 1
		payload_size = struct.unpack_from("<L", file_data, offset_payload)[0]
		offset_payload += 4
		payload_data = file_data[offset_payload:offset_payload+payload_size]
		
		print "Payload offset: 0x%x" % offset_payload
		print "Payload size: %s bytes" % payload_size
		
		decrypt(payload_data, payload_size, key, "new")
		create_file(payload_data, "payload_exe.bin")
		
		print "Payload successfully decrypted as: payload_exe.bin"
		print "Decryption key: 0x%x" % key


if __name__ == '__main__':
	main()
