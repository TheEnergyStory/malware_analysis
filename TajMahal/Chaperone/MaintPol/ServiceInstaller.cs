using System;
using System.Runtime.InteropServices;

public static class ServiceInstaller
{
	[DllImport("advapi32.dll", CharSet = CharSet.Unicode, EntryPoint = "OpenSCManagerW", ExactSpelling = true, SetLastError = true)]
	private static extern IntPtr OpenSCManager(string machineName, string databaseName, ScmAccessRights dwDesiredAccess);

	[DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern IntPtr OpenService(IntPtr hSCManager, string lpServiceName, ServiceAccessRights dwDesiredAccess);

	[DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern IntPtr CreateService(IntPtr hSCManager, string lpServiceName, string lpDisplayName, ServiceAccessRights dwDesiredAccess, int dwServiceType, ServiceBootFlag dwStartType, ServiceError dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, IntPtr lpdwTagId, string lpDependencies, string lp, string lpPassword);

	[DllImport("advapi32.dll", SetLastError = true)]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool CloseServiceHandle(IntPtr hSCObject);

	[DllImport("advapi32.dll", SetLastError = true)]
	private static extern int StartService(IntPtr hService, int dwNumServiceArgs, int lpServiceArgVectors);

	public static void InstallService(string serviceName, string displayName, string fileName)
	{
		IntPtr intPtr = ServiceInstaller.OpenSCManager(ScmAccessRights.AllAccess);
		try
		{
			IntPtr value = ServiceInstaller.OpenService(intPtr, serviceName, ServiceAccessRights.AllAccess);
			if (value == IntPtr.Zero)
			{
				value = ServiceInstaller.CreateService(intPtr, serviceName, displayName, ServiceAccessRights.AllAccess, 16, ServiceBootFlag.AutoStart, ServiceError.Normal, fileName, null, IntPtr.Zero, null, null, null);
			}
			value == IntPtr.Zero;
		}
		catch (Exception)
		{
		}
		finally
		{
			ServiceInstaller.CloseServiceHandle(intPtr);
		}
	}

	public static void StartService(string serviceName)
	{
		IntPtr intPtr = ServiceInstaller.OpenSCManager(ScmAccessRights.Connect);
		try
		{
			IntPtr intPtr2 = ServiceInstaller.OpenService(intPtr, serviceName, ServiceAccessRights.QueryStatus | ServiceAccessRights.Start);
			if (intPtr2 != IntPtr.Zero)
			{
				try
				{
					ServiceInstaller.StartService(intPtr2);
				}
				finally
				{
					ServiceInstaller.CloseServiceHandle(intPtr2);
				}
			}
		}
		finally
		{
			ServiceInstaller.CloseServiceHandle(intPtr);
		}
	}

	public static bool ServiceIsInstalled(string serviceName)
	{
		IntPtr intPtr = ServiceInstaller.OpenSCManager(ScmAccessRights.Connect);
		bool result;
		try
		{
			IntPtr intPtr2 = ServiceInstaller.OpenService(intPtr, serviceName, ServiceAccessRights.QueryStatus);
			if (intPtr2 == IntPtr.Zero)
			{
				result = false;
			}
			else
			{
				ServiceInstaller.CloseServiceHandle(intPtr2);
				result = true;
			}
		}
		finally
		{
			ServiceInstaller.CloseServiceHandle(intPtr);
		}
		return result;
	}

	private static void StartService(IntPtr service)
	{
		new ServiceInstaller.SERVICE_STATUS();
		ServiceInstaller.StartService(service, 0, 0);
	}

	private static IntPtr OpenSCManager(ScmAccessRights rights)
	{
		IntPtr intPtr = ServiceInstaller.OpenSCManager(null, null, rights);
		if (intPtr == IntPtr.Zero)
		{
			return IntPtr.Zero;
		}
		return intPtr;
	}

	private const int STANDARD_RIGHTS_REQUIRED = 983040;
	private const int SERVICE_WIN32_OWN_PROCESS = 16;

	[StructLayout(LayoutKind.Sequential)]
	private class SERVICE_STATUS
	{
		public int dwServiceType;
		public ServiceState dwCurrentState;
		public int dwControlsAccepted;
		public int dwWin32ExitCode;
		public int dwServiceSpecificExitCode;
		public int dwCheckPoint;
		public int dwWaitHint;
	}
}
