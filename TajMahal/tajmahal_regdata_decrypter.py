__author__ = "R136a1"
__version__ = "0.1.0"
__copyright__ = "Copyright 2020"

import winreg


class TajMahalRegistry(object):
    def __init__(self) -> None:
        self.service_cfg_key = r"Software\Microsoft\Windows NT\CurrentVersion\AdaptiveDisplayBrightness"
        self.service_cfg_value = "seg4"
        self.key = "\x75\x25\x91\x54\xa4\x63\x20\x49\x99\xbc\x69\x14\x5d\x37\xd6\x2f\x83\x91\x7a\x80\x0e\x89\x3a\xa3"
    
    def _rc4_decrypt(self, data: bytes, key: str) -> str:
        """
        Decrypt bytes with given key via RC4 algorithm
        :param bytes: Byte array to be decrypted
        :param rc4_key: RC4 key
        :return result: Decrypted string
        """
        x = 0
        box = list(range(256))
        for i in range(256):
            x = (x + box[i] + ord(key[i % len(key)])) % 256
            box[i], box[x] = box[x], box[i]
        x = 0
        y = 0
        result = bytearray()
        for char in data:
            x = (x + 1) % 256
            y = (y + box[x]) % 256
            box[x], box[y] = box[y], box[x]
            result.append(char ^ box[(box[x] + box[y]) % 256])
        return result.decode(encoding="utf-8")
    
    def _get_registry_data(self) -> bytes:
        """
        Get encrypted data from registry
        :return result: Encrypted bytes
        """
        try:
            reg_key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.service_cfg_key, 0, winreg.KEY_READ)
        except WindowsError:
            print(f"---\nError: Key \"{self.service_cfg_key}\" not present in registry")
        else:
            try:
                result, _ = winreg.QueryValueEx(reg_key, self.service_cfg_value)
                return result
            except WindowsError:
                print(f"---\nError: Value \"{self.service_cfg_value}\" not present in registry")
    
    def run(self) -> None:
        """
        Print decrypted data
        """
        encrypted_data = self._get_registry_data()
        if encrypted_data:
            decrypted_data = self._rc4_decrypt(encrypted_data, self.key)
            if decrypted_data:
                decrypted_data = decrypted_data.split("^")
                try:
                    print("TajMahal registry data decrypter")
                    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")
                    print(f"DisplayName: {decrypted_data[0]}")
                    print(f"Description: {decrypted_data[1]}")
                    print(f"Name: {decrypted_data[2]}")
                    print(f"entryPoint: {decrypted_data[3]}")
                    print(f"srvPath: {decrypted_data[4]}")
                    print(f"markerPath: {decrypted_data[5]}")
                    print(f"task_name: {decrypted_data[6]}")
                except (KeyError, IndexError):
                    print("---\nError: Value is missing in decrypted data")
                    print(f"Data in \"HLKM\{self.service_cfg_key}\\{self.service_cfg_value}\" likely does not contain encrypted TajMahal config")
                else:
                    ttl = decrypted_data[7].split("/")
                    try:
                        print(f"ttl: {ttl[2]}-{ttl[0]}-{ttl[1]}")
                    except (KeyError, IndexError):
                        print("---\nError: ttl data seem broken")


def main():
    tmr = TajMahalRegistry()
    tmr.run()
    

if __name__ == '__main__':
    main()
